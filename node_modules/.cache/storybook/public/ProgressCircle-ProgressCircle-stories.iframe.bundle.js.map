{"version":3,"file":"ProgressCircle-ProgressCircle-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;;;;;;;;;AAGA;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AAEA;AAOA;AAEA;AAAA;AACA;AACA;AACA;AACA;;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAMA;AAEA;AACA","sources":["webpack://@bob-obringer/ods/./src/ProgressCircle/ProgressCircle.stories.tsx","webpack://@bob-obringer/ods/./src/ProgressCircle/ProgressCircle.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { ComponentMeta } from \\\"@storybook/react\\\";\\nimport { ProgressCircle as Component } from \\\"./ProgressCircle\\\";\\n\\nexport default {\\n  title: \\\"ProgressCircle\\\",\\n  component: Component,\\n  argTypes: {\\n    isIndeterminate: {\\n      type: \\\"boolean\\\",\\n    },\\n    value: {\\n      type: \\\"number\\\",\\n    },\\n    minValue: {\\n      type: \\\"number\\\",\\n    },\\n    maxValue: {\\n      type: \\\"number\\\",\\n    },\\n  },\\n} as ComponentMeta<typeof Component>;\\n\\nexport function ProgressCircle(args, globals) {\\n  const { colorMode } = globals.globals;\\n\\n  return (\\n    <div style={{ color: colorMode.match(/light/) ? \\\"#000\\\" : \\\"#fff\\\" }}>\\n      <Component {...args} />\\n    </div>\\n  );\\n}\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"ProgressCircle\":{\"startLoc\":{\"col\":7,\"line\":23},\"endLoc\":{\"col\":1,\"line\":31},\"startBody\":{\"col\":7,\"line\":23},\"endBody\":{\"col\":1,\"line\":31}}};\n    \nimport { ComponentMeta } from \"@storybook/react\";\nimport { ProgressCircle as Component } from \"./ProgressCircle\";\n\nexport default {\n  title: \"ProgressCircle\",\n  component: Component,\n  argTypes: {\n    isIndeterminate: {\n      type: \"boolean\",\n    },\n    value: {\n      type: \"number\",\n    },\n    minValue: {\n      type: \"number\",\n    },\n    maxValue: {\n      type: \"number\",\n    },\n  },\n} as ComponentMeta<typeof Component>;\n\nexport const ProgressCircle = function ProgressCircle(args, globals) {\n  const { colorMode } = globals.globals;\n\n  return (\n    <div style={{ color: colorMode.match(/light/) ? \"#000\" : \"#fff\" }}>\n      <Component {...args} />\n    </div>\n  );\n};\n\n\nProgressCircle.parameters = { storySource: { source: \"function ProgressCircle(args, globals) {\\n  const { colorMode } = globals.globals;\\n\\n  return (\\n    <div style={{ color: colorMode.match(/light/) ? \\\"#000\\\" : \\\"#fff\\\" }}>\\n      <Component {...args} />\\n    </div>\\n  );\\n}\" }, ...ProgressCircle.parameters };","import { AriaProgressBarProps, useProgressBar } from \"react-aria\";\nimport { OCComponentPropsAnd } from \"../types\";\nimport { forwardRef, RefObject } from \"react\";\n\nexport type ProgressCircleProps = AriaProgressBarProps & {\n  size?: number;\n  thickness?: number;\n};\n\nfunction ProgressCircle(\n  {\n    style,\n    className,\n    size = 32,\n    thickness = 2,\n    label = \"In Progress\",\n    ...props\n  }: OCComponentPropsAnd<ProgressCircleProps>,\n  ref: RefObject<SVGSVGElement>\n) {\n  let { isIndeterminate, value, minValue = 0, maxValue = 100 } = props;\n  let { progressBarProps } = useProgressBar({ label, ...props });\n  let radius = size / 2;\n  let center = radius;\n  let r = radius - thickness;\n  let c = 2 * r * Math.PI;\n  let percentage = isIndeterminate\n    ? 0.25\n    : (value - minValue) / (maxValue - minValue);\n  let offset = c - percentage * c;\n\n  return (\n    <svg\n      {...progressBarProps}\n      style={{ shapeRendering: \"geometricPrecision\", ...style }}\n      className={className}\n      width={size}\n      height={size}\n      viewBox={`0 0 ${size} ${size}`}\n      fill=\"none\"\n      strokeWidth={thickness}\n      ref={ref}\n    >\n      <circle\n        role=\"presentation\"\n        cx={center}\n        cy={center}\n        r={r}\n        stroke=\"currentColor\"\n        opacity={0.4}\n      />\n      <circle\n        role=\"presentation\"\n        cx={center}\n        cy={center}\n        r={r}\n        stroke=\"currentColor\"\n        strokeDasharray={`${c} ${c}`}\n        strokeDashoffset={offset}\n        transform={`rotate(-90 ${radius} ${radius})`}\n      >\n        {props.isIndeterminate && (\n          <animateTransform\n            attributeName=\"transform\"\n            type=\"rotate\"\n            begin=\"0s\"\n            dur=\"1s\"\n            from={`0 ${radius} ${radius}`}\n            to={`360 ${radius} ${radius}`}\n            repeatCount=\"indefinite\"\n          />\n        )}\n      </circle>\n    </svg>\n  );\n}\n\nconst _ProgressCircle = forwardRef(ProgressCircle);\nexport { _ProgressCircle as ProgressCircle };\n"],"names":[],"sourceRoot":""}