'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var merge = require('deepmerge');
var _extends = require('@babel/runtime/helpers/extends');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var merge__default = /*#__PURE__*/_interopDefault(merge);

var babelLoaderPattern = /babel-loader/; // eslint-disable-next-line @typescript-eslint/no-explicit-any

var createSwcLoader = function createSwcLoader(options) {
  return {
    loader: require.resolve('swc-loader'),
    options: _extends({
      parseMap: !!options.sourceMaps
    }, options)
  };
};
var replaceRuleSetRule = function replaceRuleSetRule(rule, options) {
  if (!('test' in rule && rule.test instanceof RegExp)) return rule;
  if (!rule.test.test('dummy.js') && !rule.test.test('dummy.ts')) return rule;

  if (rule.oneOf) {
    return _extends({}, rule, {
      oneOf: rule.oneOf.map(function (rule) {
        return replaceRuleSetRule(rule, options);
      })
    });
  }

  if (rule.loader) {
    if (!babelLoaderPattern.test(rule.loader)) return rule;
    return _extends({}, rule, {
      loader: undefined,
      use: [createSwcLoader(options)]
    });
  }

  if (typeof rule.use === 'string') {
    if (!babelLoaderPattern.test(rule.use)) return rule;
    return _extends({}, rule, {
      use: [createSwcLoader(options)]
    });
  }

  if (Array.isArray(rule.use)) {
    return _extends({}, rule, {
      use: rule.use.map(function (item) {
        if (typeof item === 'string' && item.includes('babel-loader')) {
          return createSwcLoader(options);
        }

        if (typeof item.loader === 'string' && babelLoaderPattern.test(item.loader)) {
          return createSwcLoader(options);
        }

        return item;
      })
    });
  }

  return rule;
};
var replaceLoader = function replaceLoader(options) {
  return function (config) {
    var _config$module, _config$module$rules;

    return _extends({}, config, {
      module: _extends({}, config.module, {
        rules: (_config$module = config.module) == null ? void 0 : (_config$module$rules = _config$module.rules) == null ? void 0 : _config$module$rules.map(function (rule) {
          return replaceRuleSetRule(rule, options);
        })
      })
    });
  };
};
var replaceMinimizer = function replaceMinimizer(options) {
  var TerserPlugin = require('terser-webpack-plugin');

  return function (config) {
    var _config$optimization, _config$optimization$;

    return _extends({}, config, {
      optimization: _extends({}, config.optimization, {
        minimizer: 0 < ((_config$optimization = config.optimization) == null ? void 0 : (_config$optimization$ = _config$optimization.minimizer) == null ? void 0 : _config$optimization$.length) ? [new TerserPlugin({
          minify: TerserPlugin.swcMinify,
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          terserOptions: options
        })] : []
      })
    });
  };
};
var disableSourceMap = function disableSourceMap(config) {
  return _extends({}, config, {
    devtool: false
  });
};

var isProduction =         "production" === 'production';
var defaultOptions = {
  enable: true,
  enableSwcLoader: true,
  enableSwcMinify: true,
  swcLoaderOptions: {
    isModule: 'unknown',
    sourceMaps: !isProduction,
    jsc: {
      parser: {
        syntax: 'typescript',
        tsx: true
      },
      transform: {
        react: {
          runtime: 'automatic'
        }
      }
    }
  },
  swcMinifyOptions: {
    compress: {
      inline: 0
    }
  }
};

var includeSwcConfig = function includeSwcConfig(config, options) {
  if (!options.enable) return config;
  var transformers = [];
  if (options.enableSwcLoader) transformers.push(replaceLoader(options.swcLoaderOptions));
  if (options.enableSwcMinify) transformers.push(replaceMinimizer(options.swcMinifyOptions));
  if (!options.swcLoaderOptions.sourceMaps) transformers.push(disableSourceMap);
  return transformers.reduce(function (previous, current) {
    return current(previous);
  }, config);
};

var addonFilePattern = /storybook-addon-swc(.(cjs|esm))?.js/;

var getAddonOptions = function getAddonOptions(options) {
  var _options$presetsList$, _options$presetsList;

  var addonOptions = (_options$presetsList$ = (_options$presetsList = options.presetsList) == null ? void 0 : _options$presetsList.find(function (preset) {
    return addonFilePattern.test(preset.name);
  }).options) != null ? _options$presetsList$ : {};
  return merge__default["default"](defaultOptions, addonOptions);
};

var webpack = function webpack(config, options) {
  return includeSwcConfig(config, getAddonOptions(options));
};
var managerWebpack = function managerWebpack(config, options) {
  return includeSwcConfig(config, getAddonOptions(options));
};

exports.managerWebpack = managerWebpack;
exports.webpack = webpack;
